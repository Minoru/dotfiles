#!/bin/sh

# My homebrew backup solution, which is just a wrapper around Obnam (for
# backups) and git-annex
#
# Runs along with mail_backup_logs from cron like so:
#
# # do backups each hour, writing log to the file in the home dir for another
# # script to pick up and process
# 4 2,8,14,20 * * * ( /home/minoru/.scripts/crontab/backup > /home/minoru/.backup.log 2>&1 ; /home/minoru/.scripts/crontab/mail_backup_logs )

err_storejet_not_connected=1
err_storejet_luks_closed=2
err_cd_backup=3
err_obnam_fail=4
err_run_fail=5
err_not_mounted=6

done_or_fail() {
    status=$?
    if [ $status -eq 0 ]; then
        echo 'done!'
    else
        echo "fail! (exit code is $status)"
        exit $1
    fi
}

# Prints and runs the specified command. If command fails, its exit code is
# displayed and functions quits with $err_run_fail exit code
run() {
    echo \$ $*
    $*
    status=$?
    if [ $status -ne 0 ]; then
        echo "**FAIL**: exit code is $status"
        exit $err_run_fail
    fi
    echo
}

luks_dev="/dev/disk/by-uuid/79f20330-33b7-4ea9-b5b7-efb856aeb29e"

date --rfc-2822
echo
echo '# Preparations'
echo

# check if StoreJet is connected
echo -n 'Looking for StoreJet... '
if [ -L $luks_dev ]; then
    echo 'found!'
else
    echo 'not found!'
    exit $err_storejet_not_connected
fi

# check if StoreJet is already mounted. The best heuristic for that is the
# presence of the luks device - if it's present than we have luks open. The
# device under /dev/mapper is actually a symbolic link, that's why we use -L
# test
if [ ! -L /dev/mapper/storejet_luks ]; then
    echo "Storejet LUKS is not opened!"
    exit $err_storejet_luks_closed
fi

# check that it's mounted and can be written to
mount | grep '/dev/mapper/storejet_lvm-backup on /media/storejet-backup' | grep rw >/dev/null 2>&1
done_or_fail $err_not_mounted

# actually perform backup
echo -n 'cd /media/storejet-backup ... '
cd /media/storejet-backup
done_or_fail $err_cd_backup

echo

echo '# Backing up'
echo

# !
# ! If you add a repo, update ~/.scripts/storejet-mount to force locks on it
# !

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=anki --exclude='^/home/minoru/.anki/backup' ~/.anki
run obnam forget --keep=12h,14d,5w,12m --repository=anki

run obnam backup --verify-randomly=513 --deduplicate=verify --repository=job_docs ~/docs/job
run obnam forget --keep=12h,14d,5w,12m --repository=job_docs

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=KPI_docs ~/docs/KPI
run obnam forget --keep=12h,14d,5w,12m --repository=KPI_docs

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=misc_docs ~/docs/misc
run obnam forget --keep=12h,14d,5w,12m --repository=misc_docs

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=library ~/library
run obnam forget --keep=12h,14d,5w,12m --repository=library

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=torrents --exclude='^/home/minoru/torrents/downloads' ~/torrents
run obnam forget --keep=12h,14d,5w,12m --repository=torrents

run obnam backup --verify-randomly=512 --deduplicate=verify --repository=nethack_games ~/misc/nethack_games
run obnam forget --keep=12h,14d,5w,12m --repository=nethack_games

# !
# ! If you add a repo, update ~/.scripts/storejet-mount to force locks on it
# !

# run sync to make sure everything is physically written to disk
run sync

echo '# Syncing annexes'
echo

# don't forget to do the same for annex
mount | grep '/dev/mapper/storejet_lvm-annex on /media/storejet-annex' | grep rw >/dev/null 2>&1
done_or_fail $err_not_mounted

for repo in music pictures readings video; do
    echo "## $repo"
    cd /media/storejet-annex/$repo
    run git annex sync antaeus
    run git annex get --from=antaeus .
done

run sync

cd

echo 'BACKUP DONE'

